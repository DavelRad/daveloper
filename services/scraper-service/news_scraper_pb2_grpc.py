# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import news_scraper_pb2 as news__scraper__pb2


class NewsScraperServiceStub(object):
    """News Scraper Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ScrapeArticles = channel.unary_unary(
                '/news_scraper.NewsScraperService/ScrapeArticles',
                request_serializer=news__scraper__pb2.ScrapeRequest.SerializeToString,
                response_deserializer=news__scraper__pb2.ScrapeResponse.FromString,
                )
        self.GetArticles = channel.unary_unary(
                '/news_scraper.NewsScraperService/GetArticles',
                request_serializer=news__scraper__pb2.GetArticlesRequest.SerializeToString,
                response_deserializer=news__scraper__pb2.GetArticlesResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/news_scraper.NewsScraperService/HealthCheck',
                request_serializer=news__scraper__pb2.HealthRequest.SerializeToString,
                response_deserializer=news__scraper__pb2.HealthResponse.FromString,
                )


class NewsScraperServiceServicer(object):
    """News Scraper Service
    """

    def ScrapeArticles(self, request, context):
        """Main method to scrape and process articles
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArticles(self, request, context):
        """Get processed articles from database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check endpoint
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NewsScraperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ScrapeArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.ScrapeArticles,
                    request_deserializer=news__scraper__pb2.ScrapeRequest.FromString,
                    response_serializer=news__scraper__pb2.ScrapeResponse.SerializeToString,
            ),
            'GetArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArticles,
                    request_deserializer=news__scraper__pb2.GetArticlesRequest.FromString,
                    response_serializer=news__scraper__pb2.GetArticlesResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=news__scraper__pb2.HealthRequest.FromString,
                    response_serializer=news__scraper__pb2.HealthResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'news_scraper.NewsScraperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class NewsScraperService(object):
    """News Scraper Service
    """

    @staticmethod
    def ScrapeArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/news_scraper.NewsScraperService/ScrapeArticles',
            news__scraper__pb2.ScrapeRequest.SerializeToString,
            news__scraper__pb2.ScrapeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/news_scraper.NewsScraperService/GetArticles',
            news__scraper__pb2.GetArticlesRequest.SerializeToString,
            news__scraper__pb2.GetArticlesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/news_scraper.NewsScraperService/HealthCheck',
            news__scraper__pb2.HealthRequest.SerializeToString,
            news__scraper__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
